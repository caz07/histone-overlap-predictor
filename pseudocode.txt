GIVEN: 
1. 500,000 interval emissions (x,y,z,n)
    - x means histone mark x is likely found in interval
    - y means histone mark y is likely found in interval
    - z means histone mark x and/or y are likely found in interval
    - n means neither histone mark x or histone mark y are likely found in interval


WANT:
top 50,000 intervals that likely overlap histone (idk how to word this i barely know what a histone is lol)


NOTES:
- this is rly similar to the last problem in the hw (baum-welch)
- this approach gonna use a hidden markov model (HMM)!


PSEUDOCODE:
0. define an HMM w two states: state 0 means interval doesn't overlap histone, state 1 means interval overlaps histone
ultimately want to determine responsibility matrix 1 (probability that each interval is in a certain state)
    - let states = {0, 1}, alphabet = {x, y, z, n}, # of states = l = 2, # of intervals = n = 500,000
    - dimensions: l x n
    - r1[i][j] represents probability of being in state i at interval j
    - note: columns should add to 1

1. come up w initial transition and emission matrices
    a. transition matrix: l x l
        - transition[i][j] represents probability of transitioning from state i to state j
        - assume matrix looks like this for now (index 0 represents state 0, index 1 = state 1):
        [
            [0.8, 0.2],
            [0.2, 0.8]
        ]
            - j cause based on observing the data it seems like theres a lot of n's next to each other and alot of non-n's next to each other
        - note: rows must add up to 1

    b. emission matrix: l x n
        - emission[i][j] represents probability of emitting symbol j at state i
        - assume matrix looks like this for now (column 1 represents x, 2 = y, 3 = z, 4 = n):
        [
            [0.1, 0.1, 0.05, 0.75],
            [0.25, 0.25, 0.45, 0.05]
        ]
            - since z is probably most likely to be emitted if state overlaps a histone and least likely to be emitted if state doesn't overlap histone
        - note: rows must add up to 1

2. using transition and emission matrices, estimate reponsibility matrices
    a. define variables
        - responsibility matrix 1 defined above
        - define responsibility matrix 2 (l x l x n)
            - probability of transitioning from state A to state B at interval i
            - in this case, it'll be a 2 x 2 x 500000 matrix
    b. create forward graph
        - l x n graph
        - forward[k][i] is the probability of being at state k in interval i given the previous interval's probabilities
        - calculated from first interval to last
    c. create backward graph
        - same as forward graph but calculated from the last interval to the first interval
        - backward[k][i] is the probability of being at state k in interval i given the next interval's probabilities
    d. use forward and backward graphs to calculate responsibility matrices
        - r1[k][i] = forward[k][i] * backward[k][i]
        - r2[l][k][i] = forward[l][i] * probability of transitioning from l to k at interval i * backward[k][i+1]

3. using responsibility matrices, re-estimate transition and emission matrices
    a. basically for transition[i][j] u sum all the probabilities of the HMM transitioning from state i to j and divide it by the sum of the probabilities of the HMM being in state i
    b. and then for emission[i][j] u sum all the probabilities of the HMM emitting symbol j at state i and divide it by the sum of the probabilities of the HMM being in state i
    c. hopefully that made sense DD:

4. repeat 2-3 however many times u want

5. using ur final responsibilty matrix 1, get the 50,000 intervals with the highest probability of being in state 1 and output them
    a. note: 1-based indexing (first interval is interval 1)

pseudocode notes:
    a. when calculating cells in any of the graphs in the algorithm, for each column, first you calculate the raw probabilities and then you normalize them by dividing them by the sum of the
    probabilities in that column
        - this avoids probabilities getting so low they're basically represented as 0
        - also helps ensure column probabilities add to 1 when needed